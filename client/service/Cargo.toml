[package]
name = "sc-service"
version = "0.8.0-chron.3"
authors = ["Parity Technologies <admin@parity.io>"]
edition = "2018"
license = "GPL-3.0-or-later WITH Classpath-exception-2.0"
homepage = "https://substrate.dev"
repository = "https://github.com/paritytech/substrate/"
description = "Substrate service. Starts a thread that spins up the network, client, and extrinsic pool. Manages communication between them."
readme = "README.md"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]

[features]
default = ["db"]
# The RocksDB feature activates the RocksDB database backend. If it is not activated, and you pass
# a path to a database, an error will be produced at runtime.
db = ["sc-client-db/with-kvdb-rocksdb", "sc-client-db/with-parity-db"]
wasmtime = [
	"sc-executor/wasmtime",
]
# exposes the client type
test-helpers = []

[dependencies]
derive_more = { version = "0.99.2", registry = "crates-io" }
futures01 = { package = "futures", version = "0.1.29", registry = "crates-io" }
futures = { version = "0.3.4", features = ["compat"], registry = "crates-io" }
jsonrpc-pubsub = { version = "15.0", registry = "crates-io" }
jsonrpc-core = { version = "15.0", registry = "crates-io" }
rand = { version = "0.7.3", registry = "crates-io" }
parking_lot = { version = "0.10.0", registry = "crates-io" }
lazy_static = { version = "1.4.0", registry = "crates-io" }
log = { version = "0.4.8", registry = "crates-io" }
slog = { version = "2.5.2", features = ["nested-values"], registry = "crates-io" }
futures-timer = { version = "3.0.1", registry = "crates-io" }
wasm-timer = { version = "0.2", registry = "crates-io" }
exit-future = { version = "0.2.0", registry = "crates-io" }
pin-project = { version = "0.4.8", registry = "crates-io" }
hash-db = { version = "0.15.2", registry = "crates-io" }
serde = { version = "1.0.101", registry = "crates-io" }
serde_json = { version = "1.0.41", registry = "crates-io" }
sc-keystore = { version = "2.0.0", registry = "crates-io" }
sp-io = { version = "2.0.0", registry = "crates-io" }
sp-runtime = { version = "2.0.0", registry = "crates-io" }
sp-trie = { version = "2.0.0", registry = "crates-io" }
sp-externalities = { version = "0.8.0", registry = "crates-io" }
sp-utils = { version = "2.0.0", registry = "crates-io" }
sp-version = { version = "2.0.0", registry = "crates-io" }
sp-blockchain = { version = "2.0.0", registry = "crates-io" }
sp-core = { version = "2.0.0", registry = "crates-io" }
sp-session = { version = "2.0.0", registry = "crates-io" }
sp-state-machine = { version = "0.8.0", registry = "crates-io" }
sp-application-crypto = { version = "2.0.0", registry = "crates-io" }
sp-consensus = { version = "0.8.0", registry = "crates-io" }
sp-inherents = { version = "2.0.0", registry = "crates-io" }
sc-network = { version = "0.8.0", registry = "crates-io" } 
sc-chain-spec = { version = "2.0.0", registry = "crates-io" }
sc-light = { version = "2.0.0", registry = "crates-io" }
sc-client-api = { version = "2.0.0", registry = "crates-io" }
sp-api = { version = "2.0.0", registry = "crates-io" }
sc-client-db = { version = "0.8.0", default-features = false, registry = "crates-io" }
codec = { package = "parity-scale-codec", version = "1.3.4", registry = "crates-io" }
sc-executor = { version = "0.8.0", registry = "crates-io" }
sc-transaction-pool = { version = "2.0.0", registry = "crates-io" }
sp-transaction-pool = { version = "2.0.0", registry = "crates-io" }
sc-rpc-server = { version = "2.0.0", registry = "crates-io" }
sc-rpc = { version = "2.0.0", registry = "crates-io" }
sc-block-builder = { version = "0.8.0", registry = "crates-io" }
sp-block-builder = { version = "2.0.0", registry = "crates-io" }
sc-informant = { version = "0.8.0", registry = "crates-io" }
sc-telemetry = { version = "2.0.0", registry = "crates-io" }
sc-offchain = { version = "2.0.0", registry = "crates-io" }
prometheus-endpoint = { version = "0.8.0", package = "substrate-prometheus-endpoint", registry = "crates-io" }
sc-tracing = { version = "2.0.0", registry = "crates-io" }
sp-tracing = { version = "2.0.0", registry = "crates-io" }
tracing = { version = "0.1.19", registry = "crates-io" }
parity-util-mem = { version = "0.7.0", default-features = false, features = ["primitive-types"], registry = "crates-io" }

[target.'cfg(not(target_os = "unknown"))'.dependencies]
tempfile = { version = "3.1.0", registry = "crates-io" }
directories = { version = "2.0.2", registry = "crates-io" }

[dev-dependencies]
# substrate-test-runtime-client = { version = "2.0.0", registry = "crates-io" }
sp-consensus-babe = { version = "0.8.0", registry = "crates-io" }
grandpa = { version = "0.8.0", package = "sc-finality-grandpa", registry = "crates-io" }
grandpa-primitives = { version = "2.0.0", package = "sp-finality-grandpa", registry = "crates-io" }
tokio = { version = "0.2", default-features = false, registry = "crates-io" }
async-std = { version = "1.6", default-features = false, registry = "crates-io" }
